{"id":"node_modules/blot/dist/contract.js","dependencies":[{"name":"/Users/ako/DOT/blot-create-app/new-app/node_modules/blot/dist/contract.js.map","includedInParent":true,"mtime":1630949050325},{"name":"/Users/ako/DOT/blot-create-app/new-app/node_modules/blot/dist/contract.d.ts","includedInParent":true,"mtime":1630930279000},{"name":"/Users/ako/DOT/blot-create-app/new-app/package.json","includedInParent":true,"mtime":1630930244233},{"name":"/Users/ako/DOT/blot-create-app/new-app/node_modules/blot/package.json","includedInParent":true,"mtime":1630924903000},{"name":"tslib","loc":{"line":3,"column":24},"parent":"/Users/ako/DOT/blot-create-app/new-app/node_modules/blot/dist/contract.js","resolved":"/Users/ako/DOT/blot-create-app/new-app/node_modules/tslib/tslib.es6.js"},{"name":"@polkadot/api-contract","loc":{"line":4,"column":31},"parent":"/Users/ako/DOT/blot-create-app/new-app/node_modules/blot/dist/contract.js","resolved":"/Users/ako/DOT/blot-create-app/new-app/node_modules/@polkadot/api-contract/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst api_contract_1 = require(\"@polkadot/api-contract\");\nclass ERC20 {\n    constructor(provider, abi, address) {\n        this.contract = new api_contract_1.ContractPromise(provider.getApi(), abi, address);\n        this.options = {\n            value: 0,\n            gasLimit: \"300000000000\"\n        };\n    }\n    tokenName() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { result } = yield this.contract.query['iErc20,tokenName']('', this.options);\n            return result.asOk.data.toUtf8();\n        });\n    }\n    tokenSymbol() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { result } = yield this.contract.query['iErc20,tokenSymbol']('', this.options);\n            return result.asOk.data.toUtf8();\n        });\n    }\n}\nclass Contract {\n    constructor(provider, account, dotContract) {\n        this.provider = provider;\n        this.account = account;\n        const api = this.provider.getApi();\n        const wasm = dotContract.source.wasm;\n        this.abi = new api_contract_1.Abi(dotContract, api.registry.getChainProperties());\n        this.code = new api_contract_1.CodePromise(api, this.abi, wasm);\n    }\n    deploy(params, { weight, value }, handler) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const address = this.account.getAddress();\n            const signer = yield this.account.getSigner();\n            return this.code.tx[this.abi.constructors[0].method]({\n                gasLimit: weight,\n                value\n            }, ...params).signAndSend(address, { signer }, ({ events = [], status }) => {\n                if (status.isInBlock) {\n                    events.forEach(({ event: { data, method, section } }) => {\n                        if (section === 'contracts' && method === 'ContractEmitted') {\n                            this.address = data[0].toHuman();\n                        }\n                    });\n                }\n                if (handler) {\n                    handler({ events, status });\n                }\n            });\n        });\n    }\n    getAddress() {\n        return this.address;\n    }\n    assumeERC20() {\n        if (!this.address) {\n            throw 'No address';\n        }\n        return new ERC20(this.provider, this.abi, this.address);\n    }\n    call() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.address) {\n                throw 'No address';\n            }\n            const api = this.provider.getApi();\n            const contract = new api_contract_1.ContractPromise(api, this.abi, this.address);\n            const value = 0;\n            const gasLimit = \"300000000000\";\n            const { gasConsumed, result } = yield contract.query['iErc20,tokenName']('', { gasLimit, value });\n            console.log(result.toHuman());\n            console.log(gasConsumed.toHuman());\n        });\n    }\n}\nexports.default = Contract;\n"},"sourceMaps":{"js":{"version":3,"file":"contract.js","sourceRoot":"","sources":["./contract.d.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContractPromise, CodePromise, Abi } from '@polkadot/api-contract';\nimport { ContractOptions } from '@polkadot/api-contract/types';\nimport { AccountId, EventRecord, ExtrinsicStatus } from '@polkadot/types/interfaces';\nimport { AnyJson, CodecArg } from '@polkadot/types/types';\nimport Account from './account';\nimport NetworkProvider from './provider';\ndeclare class ERC20 {\n    contract: ContractPromise;\n    options: ContractOptions;\n    constructor(provider: NetworkProvider, abi: AnyJson | Abi, address: string | AccountId);\n    tokenName(): Promise<string>;\n    tokenSymbol(): Promise<string>;\n}\nexport default class Contract {\n    provider: NetworkProvider;\n    account: Account;\n    abi: Abi;\n    code: CodePromise;\n    address: string | undefined;\n    constructor(provider: NetworkProvider, account: Account, dotContract: {\n        source: {\n            wasm: string;\n        };\n    });\n    deploy(params: CodecArg[], { weight, value }: {\n        weight: number;\n        value: number;\n    }, handler: (params: {\n        events: EventRecord[];\n        status: ExtrinsicStatus;\n    }) => void): Promise<() => void>;\n    getAddress(): string | undefined;\n    assumeERC20(): ERC20;\n    call(): Promise<void>;\n}\nexport {};\n"]}},"error":null,"hash":"27f54823281a9fb5e6ae44ac87ccb21b","cacheData":{"env":{}}}